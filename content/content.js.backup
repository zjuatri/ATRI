// Content Script - 注入到网页中运行
console.log('ZhiHuiShu content script loaded');

// 支持的域名列表
const SUPPORTED_DOMAINS = [
  'studywisdomh5.zhihuishu.com',
  'fusioncourseh5.zhihuishu.com'
];

// 检查当前 URL 是否在支持的域名下
function isSupportedDomain(url = window.location.href) {
  return SUPPORTED_DOMAINS.some(domain => url.includes(domain));
}

// 检查是否为特定页面类型
function isPageType(type, url = window.location.href) {
  // type 可以是: 'exam', 'mastery', 'pointOfMastery', 'examAnalysis', 'study'
  if (!isSupportedDomain(url)) return false;
  
  switch(type) {
    case 'exam':
      return url.includes('/exam') && !url.includes('/pointOfMastery') && !url.includes('/examAnalysis');
    case 'mastery':
      return url.includes('/study/mastery') || url.includes('/mastery');
    case 'pointOfMastery':
      return url.includes('/pointOfMastery');
    case 'examAnalysis':
      return url.includes('/examAnalysis');
    case 'study':
      return url.includes('/study');
    default:
      return false;
  }
}

// 全局变量：当前考试的参数
let currentExamParams = null;

// 监听来自页面的消息（拦截器发送的）
window.addEventListener('message', function(event) {
  // 只接受来自同一窗口的消息
  if (event.source !== window) return;
  
  console.log('📨 [content] 收到页面消息:', event.data.type);
  
  if (event.data.type === 'EXAM_DATA_INTERCEPTED') {
    console.log('✅ [content] Content Script 接收到拦截的考试数据:', event.data.data);
    
    const examData = event.data.data;
    const questions = examData.questions || [];
    
    // 保存当前考试的题目列表（按请求中的顺序）
    currentExamQuestions = questions;
    console.log('📝 [content] 题目数量:', questions.length);
    console.log('📋 [content] 题目顺序:', currentExamQuestions.map(q => q.questionId));
    
    // 重新提取URL参数，确保使用最新的参数
    extractExamParams();
    
    console.log('📋 当前考试参数:', currentExamParams);
    
    // 如果有当前考试参数，处理题目数据
    if (currentExamParams && questions.length > 0) {
      console.log('🚀 发送题目数据到 background 处理...');
      try {
        chrome.runtime.sendMessage({
          action: 'processExamData',
          fileName: currentExamParams.fileName,
          questions: questions
        }, (response) => {
          if (chrome.runtime.lastError) {
            console.error('❌ Runtime error:', chrome.runtime.lastError.message);
            return;
          }
          
          if (response && response.success) {
            console.log('✅ 题目数据处理完成:', response.result);
            
            // 如果正在自动答题，开始答题
            if (isAutoAnswering) {
              console.log('🤖 [content] 自动答题模式：题库已更新，准备开始答题...');
              console.log('📊 [content] 当前页面 URL:', window.location.href);
              console.log('📋 [content] 题目数量:', currentExamQuestions.length);
              console.log('🔢 [content] 计数器值:', answerCounter);
              
              setTimeout(() => {
                answerCounter = 1;
                console.log('🚀 [content] 重置计数器并调用 autoAnswerInExamPage()');
                autoAnswerInExamPage();
              }, 1500);
            } else {
              console.log('⏸️ [content] 当前未开启自动答题模式');
            }
          } else {
            console.error('❌ 题目数据处理失败:', response);
          }
        });
      } catch (err) {
        console.error('❌ 发送消息失败（扩展可能已重新加载）:', err.message);
      }
    } else {
      if (!currentExamParams) {
        console.warn('⚠️ 当前考试参数未初始化，无法处理题目数据');
        console.warn('⚠️ 当前URL:', window.location.href);
      }
      if (questions.length === 0) {
        console.warn('⚠️ 没有题目数据');
      }
    }
  }
  
  // 拦截 getUserAnswers 响应（答题分析页面）
  if (event.data.type === 'USER_ANSWERS_INTERCEPTED') {
    console.log('✅ 接收到答题分析数据:', event.data.data);
    handleUserAnswersData(event.data.data);
  }
});

// 检查当前页面域名
if (isSupportedDomain()) {
  console.log('智慧树页面检测成功:', window.location.href);
  
  // 如果是考试页面，检测所有 input 组件并提取URL参数
  if (isPageType('exam')) {
    console.log('检测到考试页面，开始扫描 input 组件');
    
    // 提取URL参数
    extractExamParams();
    
    // 监听URL变化（用于单页应用导航）
    let lastUrl = window.location.href;
    const urlObserver = new MutationObserver(() => {
      const currentUrl = window.location.href;
      if (currentUrl !== lastUrl) {
        console.log('🔄 URL 已变化:', currentUrl);
        lastUrl = currentUrl;
        if (isPageType('exam', currentUrl)) {
          // 重新提取参数
          extractExamParams();
          
          // 如果正在自动答题，开始答题
          if (isAutoAnswering) {
            console.log('🚀 检测到进入 exam 页面，准备答题');
            console.log('📊 当前题目数据状态:', currentExamQuestions.length, '题');
            
            setTimeout(() => {
              answerCounter = 1;
              
              // 如果已有题目数据，直接开始答题
              if (currentExamQuestions.length > 0) {
                console.log('✅ 题目数据已存在，立即开始答题');
                autoAnswerInExamPage();
              } else {
                console.log('⏳ 等待题目数据拦截...');
                // 题目数据会在拦截到请求后自动触发答题
              }
            }, 2000);
          }
        } else if (isPageType('pointOfMastery', currentUrl)) {
          // 跳转到 pointOfMastery 页面，处理进度检查
          if (isAutoAnswering) {
            console.log('🔄 检测到跳转到 pointOfMastery 页面');
            setTimeout(() => {
              handlePointOfMasteryPage();
            }, 2000);
          }
        } else if (isPageType('examAnalysis', currentUrl)) {
          // 跳转到 examAnalysis 页面，等待答题分析数据
          if (isAutoAnswering) {
            console.log('🔄 检测到跳转到 examAnalysis 页面，等待数据加载...');
            // 数据会在拦截到 getUserAnswers 请求后自动处理
          }
        }
      }
    });
    
    urlObserver.observe(document, { subtree: true, childList: true });
    
    // 同时监听 popstate 和 hashchange 事件
    window.addEventListener('popstate', () => {
      console.log('🔄 popstate 事件触发');
      const currentUrl = window.location.href;
      if (isPageType('exam', currentUrl)) {
        extractExamParams();
      } else if (isPageType('pointOfMastery', currentUrl) && isAutoAnswering) {
        setTimeout(() => {
          handlePointOfMasteryPage();
        }, 2000);
      } else if (isPageType('examAnalysis', currentUrl) && isAutoAnswering) {
        console.log('🔄 检测到跳转到 examAnalysis 页面（popstate）');
      }
    });
    
    window.addEventListener('hashchange', () => {
      console.log('🔄 hashchange 事件触发');
      const currentUrl = window.location.href;
      if (isPageType('exam', currentUrl)) {
        extractExamParams();
      } else if (isPageType('pointOfMastery', currentUrl) && isAutoAnswering) {
        setTimeout(() => {
          handlePointOfMasteryPage();
        }, 2000);
      } else if (isPageType('examAnalysis', currentUrl) && isAutoAnswering) {
        console.log('🔄 检测到跳转到 examAnalysis 页面（hashchange）');
      }
    });
    
    setTimeout(() => {
      // 只在考试页面检测 input，examAnalysis 页面不需要
      if (!window.location.href.includes('examAnalysis')) {
        detectInputElements();
        // 定期检测新增的 input
        setInterval(detectInputElements, 3000);
      }
      
      // 如果正在自动答题，开始答题流程
      if (isAutoAnswering) {
        console.log('🤖 自动答题模式：等待页面加载完成...');
        
        // examAnalysis 页面不需要等待 input
        if (window.location.href.includes('examAnalysis')) {
          console.log('📊 examAnalysis 页面，等待数据拦截...');
          return;
        }
        
        // 等待 input 元素加载
        const waitForInputs = () => {
          if (detectedInputs.length > 0) {
            console.log('✅ Input 元素已加载，准备答题');
            answerCounter = 1;
            // 等待题目数据加载
            if (currentExamQuestions.length > 0) {
              autoAnswerInExamPage();
            } else {
              console.log('⏳ 等待题目数据加载...');
              // 题目数据会在拦截到请求后自动触发答题
            }
          } else {
            console.log('⏳ 未检测到 input 元素，2秒后重试...');
            setTimeout(() => {
              detectInputElements();
              setTimeout(waitForInputs, 500);
            }, 2000);
          }
        };
        
        setTimeout(waitForInputs, 1000);
      }
    }, 2000);
  }
}

// 提取考试页面的URL参数
function extractExamParams() {
  try {
    const urlObj = new URL(window.location.href);
    const idStr = urlObj.searchParams.get('idStr');
    const recruitAndCourseId = urlObj.searchParams.get('recruitAndCourseId');
    const name = urlObj.searchParams.get('name');
    const knowledgeId = urlObj.searchParams.get('knowledgeId');
    
    if (idStr && recruitAndCourseId) {
      const fileName = `idStr=${idStr}&recruitAndCourseId=${recruitAndCourseId}.json`;
      
      // 检查是否是新的考试
      const isNewExam = !currentExamParams || currentExamParams.fileName !== fileName;
      
      currentExamParams = {
        idStr,
        recruitAndCourseId,
        name,
        knowledgeId,
        fileName: fileName
      };
      
      console.log(isNewExam ? '🆕 新考试参数:' : '♻️ 相同考试参数:', currentExamParams);
      
      // 通知 background 初始化JSON文件（添加错误处理）
      try {
        chrome.runtime.sendMessage({
          action: 'initExamFile',
          params: currentExamParams
        }, (response) => {
          // 检查是否发生了运行时错误
          if (chrome.runtime.lastError) {
            console.error('❌ Runtime error:', chrome.runtime.lastError.message);
            return;
          }
          
          if (response && response.success) {
            currentExamFile = response.examFile;
            console.log('✅ 考试文件已初始化:', currentExamFile.fileName, '题目数:', currentExamFile.totalQuestions || 0);
            updateDisplayBoxContent();
          }
        });
      } catch (err) {
        console.error('❌ 发送消息失败（扩展可能已重新加载）:', err.message);
      }
    } else {
      console.log('URL中缺少必要参数 idStr 或 recruitAndCourseId');
    }
  } catch (e) {
    console.error('提取URL参数失败:', e);
  }
}

// 创建显示参数的悬浮窗
let displayBox = null;
let targetButton = null; // 保存找到的目标按钮
let currentSecretStr = null; // 保存当前的 secretStr
let currentDateFormate = null; // 保存当前的 dateFormate
let currentTimestamp = null; // 保存时间戳
let detectedInputs = []; // 保存检测到的 input 元素
let currentExamFile = null; // 当前考试文件数据

// 自动刷题相关变量
let isAutoAnswering = false; // 是否正在自动答题
let answerCounter = 1; // 答题计数器
let autoAnswerInterval = null; // 自动答题定时器
let currentExamQuestions = []; // 当前考试的题目列表（按顺序）

// 页面加载时，恢复自动答题状态
(async function restoreAutoAnsweringState() {
  try {
    const result = await chrome.storage.local.get(['isAutoAnswering']);
    if (result.isAutoAnswering) {
      console.log('🔄 [恢复状态] 检测到自动答题状态，恢复中...');
      isAutoAnswering = true;
      console.log('✅ [恢复状态] isAutoAnswering 已设置为 true');
      console.log('📍 [恢复状态] 当前 URL:', window.location.href);
      
      // 如果是考试页面，等待题目数据加载
      if (isPageType('exam')) {
        console.log('📝 [恢复状态] 当前在考试页面，等待题目数据...');
        // autoAnswerInExamPage 会在收到题目数据后自动调用
      }
    } else {
      console.log('ℹ️ [恢复状态] 无需恢复，当前未启用自动答题');
    }
  } catch (e) {
    console.error('❌ [恢复状态] 恢复状态失败:', e);
  }
})();

// 检测页面中的所有 input 元素
function detectInputElements() {
  const inputs = document.querySelectorAll('input');
  
  // 过滤掉父元素有 display: none 的 input
  const visibleInputs = Array.from(inputs).filter(input => {
    // 检查 input 本身和所有父元素的 display 属性
    let element = input;
    while (element && element !== document.body) {
      const style = window.getComputedStyle(element);
      if (style.display === 'none') {
        return false; // 父元素或自身有 display: none，过滤掉
      }
      element = element.parentElement;
    }
    return true; // 可见的 input
  });
  
  // 总是更新检测结果
  console.log(`🔍 检测到 ${visibleInputs.length} 个可见 input 元素（总共 ${inputs.length} 个）`);
  
  detectedInputs = visibleInputs.map((input, index) => {
    const info = {
      index: index + 1,
      type: input.type || 'text',
      name: input.name || '',
      id: input.id || '',
      placeholder: input.placeholder || '',
      value: input.value || '',
      className: input.className || '',
      element: input
    };
    
    // 只打印 radio/checkbox 类型的 input
    if (info.type === 'radio' || info.type === 'checkbox') {
      console.log(`  可见 Input ${index + 1}:`, {
        type: info.type,
        id: info.id,
        name: info.name,
        className: info.className,
        placeholder: info.placeholder
      });
    }
    
    return info;
  });
  
  // 更新显示框
  updateDisplayBoxContent();
  
  return detectedInputs;
}

// 查找页面中符合条件的按钮（最后一个）
function findTargetButton() {
  // 只在 mastery 页面才查找按钮
  if (!isPageType('mastery')) {
    return null;
  }
  
  const customContentDivs = document.querySelectorAll('div.custom-content');
  console.log('找到 custom-content div 数量:', customContentDivs.length);
  
  let lastButton = null;
  let buttonCount = 0;
  
  for (let div of customContentDivs) {
    const button = div.querySelector('button');
    if (button) {
      buttonCount++;
      lastButton = button;
      console.log(`找到第 ${buttonCount} 个按钮:`, button);
    }
  }
  
  if (lastButton) {
    console.log(`找到目标按钮（最后一个，共 ${buttonCount} 个）:`, lastButton);
    targetButton = lastButton;
    return lastButton;
  }
  
  // 只在 mastery 页面才输出未找到的警告
  if (customContentDivs.length === 0) {
    // 页面可能还在加载，不输出警告
  } else {
    console.log('未找到符合条件的按钮');
  }
  return null;
}

// 定期查找按钮（因为页面可能动态加载）
function startButtonMonitor() {
  // 只在 mastery 页面才启动按钮监控
  const isMasteryPage = isPageType('mastery');
  
  if (!isMasteryPage) {
    console.log('非 mastery 页面，不启动按钮监控');
    return;
  }
  
  console.log('检测到 mastery 页面，启动按钮监控');
  
  // 立即查找一次
  findTargetButton();
  
  // 定期检查
  setInterval(() => {
    // 再次确认是否还在 mastery 页面
    if (isPageType('mastery')) {
      if (!targetButton || !document.body.contains(targetButton)) {
        findTargetButton();
        updateDisplayBox(); // 更新显示状态
      }
    }
  }, 2000);
}

// 启动按钮监控并初始化悬浮窗
setTimeout(() => {
  startButtonMonitor();
  initDisplayBox(); // 初始化并显示悬浮窗
}, 1000);

function createDisplayBox() {
  if (displayBox) return displayBox;
  
  displayBox = document.createElement('div');
  displayBox.id = 'zhihuishu-secret-display';
  displayBox.style.cssText = `
    position: fixed;
    top: 10px;
    left: 10px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 15px 20px;
    border-radius: 8px;
    font-family: 'Courier New', monospace;
    font-size: 14px;
    z-index: 999999;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    max-width: 500px;
    word-break: break-all;
    cursor: move;
  `;
  
  // 添加拖拽功能
  let isDragging = false;
  let currentX;
  let currentY;
  let initialX;
  let initialY;
  
  displayBox.addEventListener('mousedown', dragStart);
  document.addEventListener('mousemove', drag);
  document.addEventListener('mouseup', dragEnd);
  
  function dragStart(e) {
    // 如果点击的是按钮，不触发拖拽
    if (e.target.tagName === 'BUTTON') {
      return;
    }
    initialX = e.clientX - displayBox.offsetLeft;
    initialY = e.clientY - displayBox.offsetTop;
    isDragging = true;
  }
  
  function drag(e) {
    if (isDragging) {
      e.preventDefault();
      currentX = e.clientX - initialX;
      currentY = e.clientY - initialY;
      displayBox.style.left = currentX + 'px';
      displayBox.style.top = currentY + 'px';
    }
  }
  
  function dragEnd() {
    isDragging = false;
  }
  
  document.body.appendChild(displayBox);
  return displayBox;
}

// 初始化显示框（页面加载时就显示）
function initDisplayBox() {
  const box = createDisplayBox();
  updateDisplayBoxContent();
}

// 更新显示框的完整内容
function updateDisplayBoxContent() {
  if (!displayBox) return;
  
  const isStudyPage = isPageType('study');
  const isMasteryPage = isPageType('mastery');
  const hasButton = targetButton && document.body.contains(targetButton);
  const buttonStatus = hasButton ? 
    '<span style="color: #4ade80;">● 已找到</span>' : 
    '<span style="color: #fbbf24;">● 未找到</span>';
  
  const hasSecretStr = currentSecretStr !== null;
  const isExamPage = isPageType('exam');
  const hasExamFile = currentExamFile !== null;
  
  displayBox.innerHTML = `
    <div style="margin-bottom: 10px; font-weight: bold; font-size: 16px; border-bottom: 2px solid rgba(255,255,255,0.3); padding-bottom: 8px;">
      🔐 智慧树助手
    </div>
    ${hasExamFile ? `
      <div style="margin-bottom: 8px; padding-bottom: 8px; border-bottom: 1px solid rgba(255,255,255,0.2);">
        <div style="margin-bottom: 5px;">
          <strong>📚 题库:</strong> <span style="color: #4ade80;">${currentExamFile.totalQuestions || 0} 题</span>
        </div>
        <div style="font-size: 11px; color: #e0e0e0; margin-bottom: 5px; word-break: break-all;">
          ${currentExamParams.fileName}
        </div>
        <div style="display: flex; gap: 5px;">
          <button id="download-exam-file" style="
            background: #3b82f6;
            border: none;
            color: white;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 11px;
            flex: 1;
            transition: all 0.2s;
          " onmouseover="this.style.background='#2563eb'" onmouseout="this.style.background='#3b82f6'">
            📥 下载
          </button>
          <button id="clear-exam-file" style="
            background: #ef4444;
            border: none;
            color: white;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 11px;
            flex: 1;
            transition: all 0.2s;
          " onmouseover="this.style.background='#dc2626'" onmouseout="this.style.background='#ef4444'">
            🗑️ 清空
          </button>
        </div>
        <button id="clear-all-exams" style="
          background: #991b1b;
          border: none;
          color: white;
          padding: 6px 12px;
          border-radius: 4px;
          cursor: pointer;
          font-size: 10px;
          width: 100%;
          margin-top: 5px;
          transition: all 0.2s;
        " onmouseover="this.style.background='#7f1d1d'" onmouseout="this.style.background='#991b1b'">
          ⚠️ 清空所有题库
        </button>
      </div>
    ` : ''}
    ${hasSecretStr ? `
      <div style="margin-bottom: 8px; padding-bottom: 8px; border-bottom: 1px solid rgba(255,255,255,0.2);">
        <div style="margin-bottom: 8px;">
          <strong>时间:</strong> ${currentTimestamp}
        </div>
        <div style="margin-bottom: 8px;">
          <strong>secretStr:</strong><br/>
          <span style="background: rgba(0,0,0,0.2); padding: 5px; border-radius: 4px; display: inline-block; margin-top: 5px; font-size: 12px;">
            ${currentSecretStr}
          </span>
        </div>
        ${currentDateFormate ? `
          <div style="margin-bottom: 8px;">
            <strong>dateFormate:</strong> ${currentDateFormate}
          </div>
        ` : ''}
      </div>
    ` : `
      <div style="margin-bottom: 8px; padding-bottom: 8px; border-bottom: 1px solid rgba(255,255,255,0.2); color: #fbbf24;">
        等待截获请求...
      </div>
    `}
    ${isExamPage ? `
      <div style="margin-bottom: 8px; padding-bottom: 8px; border-bottom: 1px solid rgba(255,255,255,0.2);">
        <div style="margin-bottom: 5px;">
          <strong>Input 检测:</strong> <span style="color: #4ade80;">${detectedInputs.length} 个</span>
        </div>
        ${detectedInputs.length > 0 ? `
          <div style="max-height: 150px; overflow-y: auto; font-size: 11px; background: rgba(0,0,0,0.2); padding: 8px; border-radius: 4px;">
            ${detectedInputs.slice(0, 10).map(input => `
              <div style="margin-bottom: 5px; padding: 3px; border-left: 2px solid #4ade80; padding-left: 5px;">
                <strong>#${input.index}</strong> 
                type: ${input.type}
                ${input.id ? `<br/>id: ${input.id}` : ''}
                ${input.name ? `<br/>name: ${input.name}` : ''}
                ${input.placeholder ? `<br/>placeholder: ${input.placeholder}` : ''}
              </div>
            `).join('')}
            ${detectedInputs.length > 10 ? `<div style="color: #fbbf24; margin-top: 5px;">...还有 ${detectedInputs.length - 10} 个</div>` : ''}
          </div>
        ` : '<div style="font-size: 11px; color: #fbbf24;">暂无 input 元素</div>'}
      </div>
    ` : ''}
    ${isMasteryPage ? `
      <div style="padding-top: 8px; border-top: 1px solid rgba(255,255,255,0.2); margin-top: 8px;">
        <button id="start-auto-answer" style="
          background: ${isAutoAnswering ? '#ef4444' : '#10b981'};
          border: none;
          color: white;
          padding: 10px 16px;
          border-radius: 5px;
          cursor: pointer;
          font-weight: bold;
          font-size: 14px;
          width: 100%;
          transition: all 0.2s;
        " onmouseover="this.style.background='${isAutoAnswering ? '#dc2626' : '#059669'}'" 
           onmouseout="this.style.background='${isAutoAnswering ? '#ef4444' : '#10b981'}'">
          ${isAutoAnswering ? '⏸️ 停止刷题' : '🚀 开始刷题'}
        </button>
        ${isAutoAnswering ? `
          <div style="margin-top: 8px; font-size: 12px; color: #4ade80;">
            ⏳ 正在自动答题...
          </div>
        ` : ''}
      </div>
    ` : ''}
    ${isStudyPage && !isMasteryPage ? `
      <div style="padding-top: 8px;" id="button-control">
        <div style="margin-bottom: 8px;">
          <strong>目标按钮:</strong> ${buttonStatus}
        </div>
        ${hasButton ? `
          <button id="trigger-button" style="
            background: #10b981;
            border: none;
            color: white;
            padding: 8px 16px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            font-size: 13px;
            width: 100%;
            transition: all 0.2s;
          " onmouseover="this.style.background='#059669'" onmouseout="this.style.background='#10b981'">
            🎯 点击目标按钮
          </button>
        ` : `
          <div style="color: #fbbf24; font-size: 12px;">
            等待页面加载目标按钮...
          </div>
        `}
      </div>
    ` : ''}
    <div style="margin-top: 10px; font-size: 11px; opacity: 0.8; border-top: 1px solid rgba(255,255,255,0.2); padding-top: 8px;">
      提示: 可拖动此窗口 ${hasSecretStr ? '| 双击复制 secretStr' : ''}
    </div>
  `;
  
  // 绑定触发按钮点击事件（仅在 study 页面）
  if (isStudyPage && hasButton && !isMasteryPage) {
    const triggerBtn = displayBox.querySelector('#trigger-button');
    if (triggerBtn) {
      triggerBtn.addEventListener('click', handleTriggerClick);
    }
  }
  
  // 绑定开始刷题按钮（仅在 mastery 页面）
  if (isMasteryPage) {
    const autoAnswerBtn = displayBox.querySelector('#start-auto-answer');
    if (autoAnswerBtn) {
      autoAnswerBtn.addEventListener('click', handleAutoAnswer);
    }
  }
  
  // 绑定下载按钮事件
  if (hasExamFile) {
    const downloadBtn = displayBox.querySelector('#download-exam-file');
    if (downloadBtn) {
      downloadBtn.addEventListener('click', handleDownloadExamFile);
    }
    
    const clearBtn = displayBox.querySelector('#clear-exam-file');
    if (clearBtn) {
      clearBtn.addEventListener('click', handleClearExamFile);
    }
    
    const clearAllBtn = displayBox.querySelector('#clear-all-exams');
    if (clearAllBtn) {
      clearAllBtn.addEventListener('click', handleClearAllExams);
    }
  }
  
  // 复制到剪贴板功能（仅当有 secretStr 时）
  if (hasSecretStr) {
    displayBox.addEventListener('dblclick', handleDoubleClick);
  }
}

// 处理双击复制
function handleDoubleClick(e) {
  // 如果双击的是按钮，不复制
  if (e.target.tagName === 'BUTTON') {
    return;
  }
  if (currentSecretStr) {
    navigator.clipboard.writeText(currentSecretStr).then(() => {
      const originalBg = displayBox.style.background;
      displayBox.style.background = 'linear-gradient(135deg, #11998e 0%, #38ef7d 100%)';
      setTimeout(() => {
        displayBox.style.background = originalBg;
      }, 500);
    });
  }
}

// 更新显示框内容（用于定期更新按钮状态）
function updateDisplayBox() {
  updateDisplayBoxContent();
}

// 处理触发按钮点击
function handleTriggerClick(e) {
  e.stopPropagation();
  
  if (targetButton && document.body.contains(targetButton)) {
    console.log('触发目标按钮点击');
    
    // 模拟点击
    targetButton.click();
    
    // 视觉反馈
    const btn = e.target;
    const originalText = btn.innerHTML;
    btn.innerHTML = '✓ 已触发';
    btn.style.background = '#059669';
    
    setTimeout(() => {
      btn.innerHTML = originalText;
      btn.style.background = '#10b981';
    }, 1000);
  } else {
    alert('目标按钮不可用，请刷新页面');
  }
}

// 处理下载题库文件
function handleDownloadExamFile(e) {
  e.stopPropagation();
  
  if (currentExamParams) {
    try {
      chrome.runtime.sendMessage({
        action: 'downloadExamFile',
        fileName: currentExamParams.fileName
      }, (response) => {
        if (chrome.runtime.lastError) {
          console.error('❌ Runtime error:', chrome.runtime.lastError.message);
          alert('扩展已重新加载，请刷新页面');
          return;
        }
        
        if (response && response.success) {
          console.log('下载请求已发送');
          
          // 视觉反馈
          const btn = e.target;
          const originalText = btn.innerHTML;
          btn.innerHTML = '✓ 下载中...';
          btn.style.background = '#2563eb';
          
          setTimeout(() => {
            btn.innerHTML = originalText;
            btn.style.background = '#3b82f6';
          }, 2000);
        }
      });
    } catch (err) {
      console.error('❌ 发送消息失败（扩展可能已重新加载）:', err.message);
      alert('扩展已重新加载，请刷新页面');
    }
  }
}

// 处理清空当前题库
function handleClearExamFile(e) {
  e.stopPropagation();
  
  if (currentExamParams) {
    const confirmMsg = `确定要清空当前题库吗？\n文件: ${currentExamParams.fileName}\n题目数: ${currentExamFile ? currentExamFile.totalQuestions : 0}`;
    
    if (confirm(confirmMsg)) {
      try {
        chrome.runtime.sendMessage({
          action: 'clearExamFile',
          fileName: currentExamParams.fileName
        }, (response) => {
          if (chrome.runtime.lastError) {
            console.error('❌ Runtime error:', chrome.runtime.lastError.message);
            alert('扩展已重新加载，请刷新页面');
            return;
          }
          
          if (response && response.success) {
            console.log('✅ 题库已清空');
            currentExamFile = response.examFile;
            updateDisplayBoxContent();
            
            // 视觉反馈
            const btn = e.target;
            const originalText = btn.innerHTML;
            btn.innerHTML = '✓ 已清空';
            
            setTimeout(() => {
              btn.innerHTML = originalText;
            }, 2000);
          }
        });
      } catch (err) {
        console.error('❌ 发送消息失败（扩展可能已重新加载）:', err.message);
        alert('扩展已重新加载，请刷新页面');
      }
    }
  }
}

// 处理清空所有题库
function handleClearAllExams(e) {
  e.stopPropagation();
  
  const confirmMsg = '⚠️ 警告：此操作将清空所有题库数据，不可恢复！\n\n确定要继续吗？';
  
  if (confirm(confirmMsg)) {
    // 二次确认
    if (confirm('再次确认：真的要删除所有题库吗？')) {
      try {
        chrome.runtime.sendMessage({
          action: 'clearAllExams'
        }, (response) => {
          if (chrome.runtime.lastError) {
            console.error('❌ Runtime error:', chrome.runtime.lastError.message);
            alert('扩展已重新加载，请刷新页面');
            return;
          }
          
          if (response && response.success) {
            console.log('✅ 所有题库已清空');
            currentExamFile = null;
            updateDisplayBoxContent();
            
            // 视觉反馈
            const btn = e.target;
            const originalText = btn.innerHTML;
            btn.innerHTML = '✓ 全部已清空';
            btn.style.background = '#7f1d1d';
            
            setTimeout(() => {
              btn.innerHTML = originalText;
              btn.style.background = '#991b1b';
            }, 2000);
            
            alert('所有题库已清空');
          }
        });
      } catch (err) {
        console.error('❌ 发送消息失败（扩展可能已重新加载）:', err.message);
        alert('扩展已重新加载，请刷新页面');
      }
    }
  }
}

// ==================== 自动刷题功能 ====================

// 处理开始/停止自动答题
function handleAutoAnswer(e) {
  e.stopPropagation();
  
  if (isAutoAnswering) {
    // 停止自动答题
    stopAutoAnswering();
  } else {
    // 开始自动答题
    startAutoAnswering();
  }
}

// 开始自动答题
async function startAutoAnswering() {
  console.log('🚀 开始自动刷题');
  isAutoAnswering = true;
  answerCounter = 1;
  currentExamQuestions = []; // 重置题目列表
  
  // 保存状态到 storage
  try {
    await chrome.storage.local.set({ isAutoAnswering: true });
    console.log('✅ 自动答题状态已保存到 storage');
  } catch (e) {
    console.error('❌ 保存状态失败:', e);
  }
  
  updateDisplayBoxContent();
  
  // 查找第一个未完成的题目并点击
  findAndClickNextUncompleted();
}

// 停止自动答题
async function stopAutoAnswering() {
  console.log('⏸️ 停止自动刷题');
  isAutoAnswering = false;
  answerCounter = 1;
  currentExamQuestions = []; // 清空题目列表
  
  // 清除状态
  try {
    await chrome.storage.local.set({ isAutoAnswering: false });
    console.log('✅ 已清除自动答题状态');
  } catch (e) {
    console.error('❌ 清除状态失败:', e);
  }
  
  if (autoAnswerInterval) {
    clearInterval(autoAnswerInterval);
    autoAnswerInterval = null;
  }
  updateDisplayBoxContent();
}

// 查找并点击下一个未完成的题目
function findAndClickNextUncompleted() {
  // 确保在 mastery 页面
  if (!isPageType('mastery')) {
    console.log('⚠️ 不在 mastery 页面，无法查找未完成的题目');
    stopAutoAnswering();
    return false;
  }
  
  const customContentDivs = document.querySelectorAll('div.custom-content');
  console.log('🔍 找到 custom-content div 数量:', customContentDivs.length);
  
  for (let i = 0; i < customContentDivs.length; i++) {
    const div = customContentDivs[i];
    
    // 查找 class 为 text 的 div
    const textDiv = div.querySelector('div.text');
    if (textDiv) {
      const span = textDiv.querySelector('span');
      if (span) {
        const text = span.textContent.trim();
        console.log(`📊 第 ${i + 1} 个题目进度:`, text);
        
        // 如果不是 100%，点击对应的按钮
        if (text !== '100%') {
          const button = div.querySelector('button');
          if (button) {
            console.log(`✅ 找到未完成的题目 (${i + 1})，进度: ${text}，准备点击按钮`);
            button.click();
            return true;
          }
        }
      }
    }
  }
  
  console.log('⚠️ 所有题目都已完成 100%');
  stopAutoAnswering();
  alert('🎉 所有题目都已完成！');
  return false;
}

// 处理 pointOfMastery 页面
function handlePointOfMasteryPage() {
  const currentUrl = window.location.href;
  console.log('🔍 当前页面 URL:', currentUrl);
  
  // 检查是否在 pointOfMastery 页面
  if (!isPageType('pointOfMastery', currentUrl)) {
    console.warn('⚠️ 不在 pointOfMastery 页面，等待跳转...');
    setTimeout(() => {
      if (isAutoAnswering) {
        handlePointOfMasteryPage();
      }
    }, 2000);
    return;
  }
  
  console.log('✅ 已进入 pointOfMastery 页面');
  
  // 查找 class="charts-label-rate" 的 div
  const chartsLabelRate = document.querySelector('div.charts-label-rate');
  
  if (!chartsLabelRate) {
    console.warn('⚠️ 未找到 charts-label-rate，2秒后重试...');
    setTimeout(() => {
      if (isAutoAnswering) {
        handlePointOfMasteryPage();
      }
    }, 2000);
    return;
  }
  
  const rateText = chartsLabelRate.textContent.trim();
  console.log('📊 当前进度:', rateText);
  
  // 如果进度是 100，点击 backup 返回 mastery 页面
  if (rateText === '100') {
    console.log('🎉 进度已达 100%，点击返回按钮');
    const backupDiv = document.querySelector('div.backup');
    
    if (backupDiv) {
      backupDiv.click();
      console.log('✅ 已点击返回按钮，等待跳转到 mastery 页面...');
      
      // 等待跳转后继续寻找未完成的题目
      setTimeout(() => {
        if (isAutoAnswering) {
          console.log('🔄 返回 mastery 页面，继续寻找未完成题目...');
          // 重置计数器
          answerCounter = 1;
          currentExamQuestions = [];
          
          // 等待页面加载完成
          setTimeout(() => {
            if (isAutoAnswering) {
              findAndClickNextUncompleted();
            }
          }, 2000);
        }
      }, 2000);
    } else {
      console.error('❌ 未找到 backup 按钮');
      stopAutoAnswering();
    }
  } else {
    // 进度未达 100，点击 line1-count-link
    console.log('📝 进度未达 100%，点击继续练习');
    const line1CountLink = document.querySelector('div.line1-count-link');
    
    if (line1CountLink) {
      line1CountLink.click();
      console.log('✅ 已点击继续练习，等待页面加载...');
      
      // 等待页面跳转后重新开始答题流程
      setTimeout(() => {
        if (isAutoAnswering) {
          console.log('🔄 页面已加载，继续刷题...');
          // 重置计数器
          answerCounter = 1;
          currentExamQuestions = [];
          
          // 等待页面完全加载
          setTimeout(() => {
            if (isAutoAnswering) {
              // 如果跳转到了考试页面，等待题目数据
              if (window.location.href.includes('/exam')) {
                console.log('⏳ 等待题目数据加载...');
                // 题目数据会在拦截到请求后自动触发答题
              } else if (window.location.href.includes('/study/mastery')) {
                // 如果回到了 mastery 页面，继续寻找未完成题目
                findAndClickNextUncompleted();
              }
            }
          }, 2000);
        }
      }, 2000);
    } else {
      console.error('❌ 未找到 line1-count-link');
      stopAutoAnswering();
    }
  }
}

// 处理答题分析数据（examAnalysis 页面）
function handleUserAnswersData(data) {
  console.log('📊 开始处理答题分析数据');
  
  if (!data || !data.questions) {
    console.error('❌ 答题分析数据格式错误');
    return;
  }
  
  const questions = data.questions;
  console.log(`📝 共有 ${questions.length} 道题目需要分析`);
  
  // 提取当前考试参数
  const urlObj = new URL(window.location.href);
  const examId = urlObj.searchParams.get('examId');
  const recruitAndCourseId = urlObj.searchParams.get('recruitAndCourseId');
  const idStr = urlObj.searchParams.get('knowledgeId'); // 注意这里是 knowledgeId
  
  if (!idStr || !recruitAndCourseId) {
    console.error('❌ URL 中缺少必要参数');
    return;
  }
  
  const fileName = `idStr=${idStr}&recruitAndCourseId=${recruitAndCourseId}.json`;
  console.log('📁 对应的题库文件:', fileName);
  
  let correctCount = 0;
  let wrongCount = 0;
  const updates = [];
  
  // 分析每道题目
  questions.forEach(question => {
    const questionId = question.questionId;
    const userAnswerVo = question.userAnswerVo;
    
    if (!userAnswerVo) {
      console.warn(`⚠️ 题目 ${questionId} 没有作答记录`);
      return;
    }
    
    const isCorrect = userAnswerVo.isCorrect; // 1=正确, 2=错误
    
    if (isCorrect === 1) {
      correctCount++;
      console.log(`✅ 题目 ${questionId} 答对了，答案不需要修改`);
    } else if (isCorrect === 2) {
      wrongCount++;
      console.log(`❌ 题目 ${questionId} 答错了，需要将答案 +1`);
      updates.push({
        questionId: questionId,
        action: 'increment'
      });
    }
  });
  
  console.log(`📊 统计结果: 正确 ${correctCount} 题，错误 ${wrongCount} 题`);
  
  // 如果有需要更新的题目，发送给 background
  if (updates.length > 0) {
    console.log('🔄 准备更新题库...');
    
    try {
      chrome.runtime.sendMessage({
        action: 'updateAnswers',
        fileName: fileName,
        updates: updates
      }, (response) => {
        if (chrome.runtime.lastError) {
          console.error('❌ Runtime error:', chrome.runtime.lastError.message);
          return;
        }
        
        if (response && response.success) {
          console.log('✅ 题库更新成功');
          
          // 更新完成后，点击提交按钮进入下一轮
          if (isAutoAnswering) {
            setTimeout(() => {
              clickSubmitInAnalysisPage();
            }, 1000);
          }
        } else {
          console.error('❌ 题库更新失败');
        }
      });
    } catch (err) {
      console.error('❌ 发送更新消息失败:', err.message);
    }
  } else {
    console.log('✅ 所有题目都答对了，不需要更新题库');
    
    // 直接点击提交按钮
    if (isAutoAnswering) {
      setTimeout(() => {
        clickSubmitInAnalysisPage();
      }, 1000);
    }
  }
}

// 在答题分析页面点击提交按钮
function clickSubmitInAnalysisPage() {
  console.log('🔍 查找答题分析页面的提交按钮...');
  console.log('📍 当前页面 URL:', window.location.href);
  
  // 尝试多种选择器
  const selectors = [
    'div.submit',
    '.submit',
    'div[class*="submit"]',
    'button.submit',
    'div.confirm',
    '.confirm',
    'div.next',
    '.next'
  ];
  
  let submitElement = null;
  
  for (const selector of selectors) {
    submitElement = document.querySelector(selector);
    if (submitElement) {
      console.log(`✅ 找到提交元素 (${selector}):`, submitElement);
      break;
    }
  }
  
  if (submitElement) {
    console.log('🎯 准备点击提交按钮');
    console.log('按钮文本:', submitElement.textContent);
    console.log('按钮类名:', submitElement.className);
    
    // 尝试多种点击方式
    try {
      // 方式1: 直接点击
      submitElement.click();
      console.log('✅ 已执行 click()');
      
      // 方式2: 触发鼠标事件
      const clickEvent = new MouseEvent('click', {
        bubbles: true,
        cancelable: true,
        view: window
      });
      submitElement.dispatchEvent(clickEvent);
      console.log('✅ 已触发 MouseEvent');
      
      // 方式3: 如果是 div，尝试查找内部的 button
      const innerButton = submitElement.querySelector('button');
      if (innerButton) {
        console.log('🔍 找到内部 button，点击');
        innerButton.click();
      }
      
    } catch (e) {
      console.error('❌ 点击失败:', e);
    }
    
    // 点击后会跳转回考试页面，等待页面加载
    setTimeout(() => {
      if (isAutoAnswering) {
        console.log('⏳ [clickSubmitInAnalysisPage] 等待跳转回考试页面...');
        console.log('📊 [clickSubmitInAnalysisPage] 当前 URL:', window.location.href);
        console.log('📊 [clickSubmitInAnalysisPage] currentExamQuestions:', currentExamQuestions.length);
        
        // 重置计数器
        answerCounter = 1;
        console.log('🔄 [clickSubmitInAnalysisPage] 已重置计数器');
        
        // 注意: 不清空 currentExamQuestions，因为是同一套题目
        console.log('📊 [clickSubmitInAnalysisPage] 保留题目数据，题目数量:', currentExamQuestions.length);
        
        // 等待题目数据加载后自动开始答题
        setTimeout(() => {
          const currentUrl = window.location.href;
          console.log('📍 当前 URL:', currentUrl);
          
          if (currentUrl.includes('/exam') && isAutoAnswering) {
            console.log('✅ 已回到考试页面');
            console.log('📊 当前题目数据状态:', currentExamQuestions.length, '题');
            
            // 检查是否有题目数据
            if (currentExamQuestions.length > 0) {
              console.log('🚀 题目数据已存在，立即开始答题');
              autoAnswerInExamPage();
            } else {
              console.log('⏳ 题目数据为空，等待页面发送请求...');
              console.log('💡 页面应该会自动发送 exam/start 请求');
              
              // 主动等待一段时间让页面有机会发送请求
              setTimeout(() => {
                if (currentExamQuestions.length > 0) {
                  console.log('✅ 已拦截到题目数据，开始答题');
                  autoAnswerInExamPage();
                } else {
                  console.warn('⚠️ 3秒后仍未拦截到数据，调用 autoAnswerInExamPage 进入等待流程');
                  autoAnswerInExamPage(); // 进入等待循环
                }
              }, 3000);
            }
          } else {
            console.log('⚠️ 未回到考试页面或自动答题已停止');
          }
        }, 2000);
      }
    }, 1000);
  } else {
    console.error('❌ 未找到提交按钮 (尝试了多个选择器)');
    
    // 尝试查找所有可能的按钮
    console.log('🔍 尝试查找所有 div 和 button...');
    
    const allDivs = document.querySelectorAll('div');
    console.log(`📊 总共找到 ${allDivs.length} 个 div`);
    
    // 查找包含"提交"、"确定"、"继续"等关键字的 div
    for (const div of allDivs) {
      const text = div.textContent.trim();
      const className = div.className;
      
      if (text === '提交' || text === '确定' || text === '继续' || text === '下一步') {
        console.log('✅ 找到可能的提交按钮 (通过文本):', text, 'class:', className);
        div.click();
        
        // 触发多种事件
        div.dispatchEvent(new MouseEvent('click', { bubbles: true }));
        div.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
        div.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));
        
        return;
      }
      
      // 检查 class 名称
      if (className && (className.includes('submit') || className.includes('confirm') || className.includes('next'))) {
        console.log('✅ 找到可能的提交按钮 (通过 class):', className, 'text:', text.substring(0, 50));
        div.click();
        div.dispatchEvent(new MouseEvent('click', { bubbles: true }));
        return;
      }
    }
    
    // 查找所有 button
    const buttons = document.querySelectorAll('button');
    console.log(`🔍 找到 ${buttons.length} 个 button`);
    
    for (const btn of buttons) {
      const text = btn.textContent.trim();
      console.log('按钮文本:', text, 'class:', btn.className);
      
      if (text.includes('提交') || text.includes('确定') || text.includes('继续') || text.includes('下一步')) {
        console.log('✅ 找到疑似提交按钮:', text);
        btn.click();
        btn.dispatchEvent(new MouseEvent('click', { bubbles: true }));
        return;
      }
    }
    
    console.error('❌ 未找到任何提交按钮，停止自动答题');
    console.log('💡 提示: 请手动点击提交按钮，然后重新开始刷题');
    // 不停止自动答题，等待手动点击
    // stopAutoAnswering();
  }
}

// 在考试页面自动答题
function autoAnswerInExamPage() {
  if (!isAutoAnswering) {
    console.log('⏸️ 自动答题已停止');
    return;
  }
  
  console.log(`📝 开始答题流程，当前计数器: ${answerCounter}`);
  console.log(`📊 当前题目数据: ${currentExamQuestions.length} 题`);
  
  // 检查是否有题目数据
  if (currentExamQuestions.length === 0) {
    console.warn('⚠️ 没有题目数据，等待题目加载...');
    console.log('💡 提示: 页面可能已刷新，等待拦截新的考试数据请求');
    
    // 检查拦截器状态
    if (window.__INTERCEPTOR_READY__) {
      console.log('✅ 拦截器已就绪');
    } else {
      console.warn('⚠️ 拦截器可能未就绪，检查 page-interceptor.js 是否已加载');
    }
    
    let waitCount = 0;
    const maxWait = 5;
    
    const waitForData = () => {
      waitCount++;
      console.log(`⏳ 等待题目数据... (${waitCount}/${maxWait})`);
      console.log(`📊 currentExamQuestions.length: ${currentExamQuestions.length}`);
      console.log(`🔍 拦截器状态: ${window.__INTERCEPTOR_READY__ ? '就绪' : '未就绪'}`);
      
      if (currentExamQuestions.length > 0) {
        console.log('✅ 题目数据已加载，继续答题');
        autoAnswerInExamPage();
      } else if (waitCount < maxWait && isAutoAnswering) {
        setTimeout(waitForData, 2000);
      } else {
        console.error('❌ 等待超时，题目数据未加载');
        console.error('💡 可能原因：');
        console.error('   1. 页面未发送 exam/start 请求');
        console.error('   2. 请求已发送但拦截器未捕获');
        console.error('   3. 响应数据格式不符合预期');
        console.error('请检查 Network 面板中是否有 exam/start 请求');
      }
    };
    
    setTimeout(waitForData, 2000);
    return;
  }
  
  // 开始答题流程：点击第一个 item
  console.log('� 开始答题流程');
  clickNextQuestion();
}

// 获取当前题目ID（已废弃，改用 currentExamQuestions）
function getCurrentQuestionId() {
  // 不再需要这个函数，直接从 currentExamQuestions 获取
  return null;
}

// 从题库获取答案
function getAnswerFromExamFile(questionId) {
  if (!currentExamFile || !currentExamFile.questions) {
    return null;
  }
  
  const question = currentExamFile.questions[questionId];
  return question ? question.answer : null;
}

// 只填入答案，不处理后续逻辑
function fillAnswerOnly(answerIndex) {
  // 获取所有可见的 input (radio 或 checkbox 类型)
  const visibleInputs = detectedInputs.filter(input => {
    const isValidType = input.type === 'radio' || input.type === 'checkbox';
    const isVisible = input.element && document.body.contains(input.element);
    return isValidType && isVisible;
  });
  
  console.log(`📋 可见的 radio/checkbox input 数量: ${visibleInputs.length}`);
  console.log(`💡 需要填入第 ${answerIndex} 个 input`);
  
  // 点击第 answerIndex 个 input (索引从1开始)
  const targetInput = visibleInputs[answerIndex - 1];
  if (targetInput && targetInput.element) {
    console.log(`✅ 点击第 ${answerIndex} 个 input (类型: ${targetInput.type})`);
    targetInput.element.click();
    
    // 也尝试触发 change 事件
    const changeEvent = new Event('change', { bubbles: true });
    targetInput.element.dispatchEvent(changeEvent);
    
    // 对于 checkbox，可能需要触发 input 事件
    if (targetInput.type === 'checkbox') {
      const inputEvent = new Event('input', { bubbles: true });
      targetInput.element.dispatchEvent(inputEvent);
    }
    
    // 等待1秒后，计数器加一并点击下一题
    setTimeout(() => {
      answerCounter++;
      console.log(`📊 计数器更新为: ${answerCounter}`);
      clickNextQuestion();
    }, 1000);
  } else {
    console.error(`❌ 第 ${answerIndex} 个 input 不存在，可用 input 数量: ${visibleInputs.length}`);
    // 等待1秒后继续
    setTimeout(() => {
      answerCounter++;
      clickNextQuestion();
    }, 1000);
  }
}

// 点击下一题或提交
function clickNextQuestion() {
  // 每次都重新检测页面中 class 为 item 的 div
  const itemDivs = document.querySelectorAll('div.item');
  console.log(`🔍 重新检测到 ${itemDivs.length} 个 class 为 item 的 div`);
  console.log(`📊 当前计数器值: ${answerCounter}`);
  
  // 如果计数器值大于 item 的个数，点击提交按钮
  if (answerCounter > itemDivs.length) {
    console.log(`✅ 计数器 ${answerCounter} > item 数量 ${itemDivs.length}，准备点击提交按钮`);
    const submitDiv = document.querySelector('div.submit');
    if (submitDiv) {
      console.log('🎯 找到提交按钮，点击提交');
      submitDiv.click();
      
      // 提交后等待页面跳转，然后处理 pointOfMastery 页面
      console.log('⏳ 等待页面跳转到 pointOfMastery...');
      setTimeout(() => {
        handlePointOfMasteryPage();
      }, 3000);
    } else {
      console.error('❌ 没有找到提交按钮 (div.submit)');
      isAutoAnswering = false;
    }
    return;
  }
  
  // 点击对应计数器值的 item (计数器从1开始，索引从0开始)
  const targetItem = itemDivs[answerCounter - 1];
  if (targetItem) {
    console.log(`🎯 点击第 ${answerCounter} 个 item`);
    targetItem.click();
    
    // 点击后等待页面更新，然后检测 input 并填答案
    setTimeout(() => {
      if (isAutoAnswering) {
        detectAndFillAnswer();
      }
    }, 1500);
  } else {
    console.error(`❌ 第 ${answerCounter} 个 item 不存在，总共 ${itemDivs.length} 个 item`);
  }
}

// 检测 input 并填入答案
function detectAndFillAnswer() {
  console.log('🔍 开始检测 input 元素...');
  
  // 重新检测 input 元素
  detectInputElements();
  
  // 稍等一下再检查，确保 detectedInputs 已更新
  setTimeout(() => {
    // 获取所有可见的 radio/checkbox input
    const availableInputs = detectedInputs.filter(input => {
      const isValidType = input.type === 'radio' || input.type === 'checkbox';
      const isVisible = input.element && document.body.contains(input.element);
      return isValidType && isVisible;
    });
    
    console.log(`📊 检测到 ${availableInputs.length} 个可用的 radio/checkbox input`);
    
    if (availableInputs.length === 0) {
      console.warn('⚠️ 未检测到可用的 input 元素，2秒后重试...');
      
      // 2秒后重试
      setTimeout(() => {
        if (!isAutoAnswering) return;
        
        console.log('🔄 重新检测 input...');
        detectInputElements();
        
        // 再次等待一下确保检测完成
        setTimeout(() => {
          const retryInputs = detectedInputs.filter(input => {
            const isValidType = input.type === 'radio' || input.type === 'checkbox';
            const isVisible = input.element && document.body.contains(input.element);
            return isValidType && isVisible;
          });
          
          console.log(`📊 重试后检测到 ${retryInputs.length} 个可用的 radio/checkbox input`);
          
          if (retryInputs.length > 0) {
            console.log('✅ 重新检测到 input，继续填答案');
            fillAnswerForCurrentQuestion();
          } else {
            console.error('❌ 重试后仍未找到 input 元素，跳过此题');
            // 等待1秒后，计数器加一并继续下一题
            setTimeout(() => {
              answerCounter++;
              clickNextQuestion();
            }, 1000);
          }
        }, 100);
      }, 2000);
      
      return;
    }
    
    // 检测到 input，填入答案
    console.log('✅ 检测到可用 input，准备填答案');
    fillAnswerForCurrentQuestion();
  }, 100);
}

// 为当前题目填入答案
function fillAnswerForCurrentQuestion() {
  // 获取当前题目
  const currentQuestion = currentExamQuestions[answerCounter - 1];
  if (!currentQuestion) {
    console.error(`❌ 没有找到第 ${answerCounter} 题的数据`);
    // 跳过此题
    setTimeout(() => {
      answerCounter++;
      clickNextQuestion();
    }, 1000);
    return;
  }
  
  const currentQuestionId = currentQuestion.questionId;
  console.log(`📋 当前题目 ${answerCounter}/${currentExamQuestions.length}, ID: ${currentQuestionId}`);
  
  // 从题库获取答案
  const answer = getAnswerFromExamFile(currentQuestionId);
  if (!answer) {
    console.warn(`⚠️ 题库中没有题目 ${currentQuestionId} 的答案，使用默认答案 1`);
  }
  
  const answerIndex = answer || 1;
  console.log(`💡 题目 ${currentQuestionId} 的答案索引: ${answerIndex}`);
  
  // 填入答案（不再在 fillAnswer 内部处理后续逻辑）
  fillAnswerOnly(answerIndex);
}

// 点击下一题或提交（已废弃，使用 clickNextQuestion 替代）
// 该函数已被新逻辑替换，保留以防引用

function showSecretStr(secretStr, dateFormate, fullUrl) {
  // 保存数据
  currentSecretStr = secretStr;
  currentDateFormate = dateFormate;
  currentTimestamp = new Date().toLocaleTimeString('zh-CN');
  
  console.log('显示 secretStr:', secretStr);
  console.log('完整URL:', fullUrl);
  
  // 如果悬浮窗还不存在，创建它
  if (!displayBox) {
    createDisplayBox();
  }
  
  // 更新显示内容
  updateDisplayBoxContent();
}

// 监听来自 background 的消息
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('Message received in content script:', request);
  
  if (request.action === 'showSecretStr') {
    showSecretStr(request.secretStr, request.dateFormate, request.fullUrl);
    sendResponse({ success: true });
  }
  
  if (request.action === 'examDataProcessed') {
    // 考试数据已处理完成
    console.log('考试数据已更新:', request.result);
    currentExamFile = request.result.examFile;
    updateDisplayBoxContent();
  }
  
  if (request.action === 'testAction') {
    console.log('Test action triggered:', request.data);
    
    // 在页面上执行一些操作
    document.body.style.border = '5px solid red';
    setTimeout(() => {
      document.body.style.border = '';
    }, 2000);
    
    sendResponse({ success: true, message: 'Action completed' });
  }
  
  return true;
});
